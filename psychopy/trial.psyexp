<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.10">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="trial" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <TextComponent name="target">
        <Param name="color" updates="set every repeat" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="target" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$sentence" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="response">
        <Param name="allowedKeys" updates="constant" val="'f', 'v'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4.5" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instruction">
      <TextComponent name="intrText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="intrText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Elige &quot;v&quot; o &quot;f&quot;.&amp;#10;&amp;#10;ahora pulsa cualquier tecla para continuar" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instruction"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="1:10" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('sentence', 'un loro es un loro'), ('type', 'S0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario es un canario'), ('type', 'S0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon es un salmon'), ('type', 'S0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao es un bacalao'), ('type', 'S0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador es un labrador'), ('type', 'S0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata es un dalmata'), ('type', 'S0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro puede hablar'), ('type', 'P0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata tiene manchas'), ('type', 'P0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario puede cantar'), ('type', 'P0'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro es un pajaro'), ('type', 'S1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario es un pajaro'), ('type', 'S1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon es un pez'), ('type', 'S1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalo es un pez'), ('type', 'S1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador es un perro'), ('type', 'S1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata es un perro'), ('type', 'S1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro tiene pulmones'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro puede volar'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro tiene pico'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro tiene plumas'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario puede volar'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario tiene pulmones'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario tiene pico'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario tiene plumas'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon tiene escamas'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon tiene branquias'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon puede nadar'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon tiene aletas'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao tiene escamas'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao tiene branquias'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao puede nadar'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao tiene aletas'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador puede ladrar'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador tiene pelo'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador puede parir'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador tiene pulmones'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata puede ladrar'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata puede parir'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata tiene pelo'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata tiene pulmones'), ('type', 'P1'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro es un animal'), ('type', 'S2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario es un animal'), ('type', 'S2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon es un animal'), ('type', 'S2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao es un animal'), ('type', 'S2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador es un animal'), ('type', 'S2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata es un animal'), ('type', 'S2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro tiene corazon'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro puede comer'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro tiene piel'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro puede respirar'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario puede comer'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario puede respirar'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario tiene piel'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un canario tiene corazon'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon tiene corazon'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon puede comer'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon puede respirar'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un salmon tiene piel'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao tiene corazon'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao puede comer'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao puede respirar'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un bacalao tiene piel'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador tiene corazon'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador puede comer'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador puede respirar'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un labrador tiene piel'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata tiene corazon '), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata puede comer'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata puede respirar'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un dalmata tiene piel'), ('type', 'P2'), ('corrAns', 'T')]), OrderedDict([('sentence', 'un loro es un salmon'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un loro es un perro'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un loro es un canario'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario es un loro'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario es un pez'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario es dalmata'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon es un pajaro'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon es un dalmata'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon es bacalao'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao es un canario'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao es un labrador'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao es un perro'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador es un canario'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador es un pez'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador es un dalmata'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata es un pajaro'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata es un bacalao'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata es un pez'), ('type', 'S'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un loro tiene branquias'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un loro puede nadar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un loro tiene aletas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un loro puede ladrar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un loro tiene escamas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un loro tiene pelo'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario tiene branquias'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario puede nadar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario tiene escamas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario tiene aletas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario puede ladrar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un canario tiene pelo'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon puede volar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon tiene pico'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon tiene plumas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon tiene pulmones'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon puede ladrar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un salmon tiene pelo'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao puede volar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao tiene pico'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao tiene plumas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao tiene pulmones'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao tiene pelo'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un bacalao puede ladrar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador puede volar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador tiene pico'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador tiene plumas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador tiene branquias'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador tiene escamas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un labrador tiene aletas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata puede volar'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata tiene pico'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata tiene plumas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata tiene branquias'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata tiene escamanas'), ('type', 'P'), ('corrAns', 'F')]), OrderedDict([('sentence', 'un dalmata tiene aletas'), ('type', 'P'), ('corrAns', 'F')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Sentences4Verification.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
